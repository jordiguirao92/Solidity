pragma solidity ^0.4.24;


contract ContractAgreement {

 address drhashAddress;
 uint drhashFee;

 struct contractAgreement {
     address seller;
     address buyer;
     uint hashrate;
     uint duration;
     uint price;
     uint fee;
     uint startTime;
     uint finishTime;
     uint paymentInterval; 
     uint dailyPayment;
     uint latestPaidTime;
     bool isActive; //Indica si el contracto esta activo o a finalizado.
     bool feePayment; //True que si se ha pagado. False que no se ha pagado.

 }
  
  contractAgreement[] public contractAgreements;
  mapping (uint => address) public buyerAgreementsOwner;
  mapping (address => uint) public buyerAgreementsCount;

  mapping (uint => address) public sellerAgreementsOwner;
  mapping (address => uint) public sellerAgreementsCount;


 function createAgreement (address _seller, address _buyer, uint _hashrate, uint _duration, uint _price) public payable {
     
     require(msg.value >= _price *1 ether);
     
     
     uint feedr = msg.value * drhashFee ether; //revisar tema del ether
     uint daypayment = (msg.value - feedr)/_duration; 
   
     uint idAgreement = contractAgreements.push(contractAgreement(_seller, _buyer, _hashrate, _duration, _price *1 ether, feedr, now, now + _duration *1 days, 1, daypayment, now, true, false));

     buyerAgreementsOwner[idAgreement] = _buyer;
     buyerAgreementsCount[_buyer]++;
     sellerAgreementsOwner[idAgreement] = _seller;
     sellerAgreementsCount[_seller]++;

 }

 function smartcontractBalance() public returns(uint _balance) { //onlyowner
   return this.balance;
 }

 function setDrHashFee(uint _newfee) public { //onlyowner
   drHashFee = _newfee;
 }


 function setDrHasAddress(address _newaddress) public{ //onlyowner
     drhashAddress = _newaddress; 
 }


  //Funcion para cobrar diariamento comision de un solo contrato.

 function drHashPaymentComision(uint _idAgreement) public { //onlyowner

     drhashAddress.transfer(contractAgreements[_idAgreement].fee);
     contractAgreements[_idAgreement].feePayment = true;
  }


  //Funcion para cobrar diariamente de todos los contratos realizados. 

  function drHashPaymentComision() public { //onlyowner

    for(uint i = 0; i < contractAgreements.length; i++) {
        if(contractAgreements[i].feePayment == false) {
            drhashAddress.transfer(contractAgreements[i].fee);
            contractAgreements[_idAgreement].feePayment = true;
        }
        else {
            //emitir evento, de que ese contrato ya ha pagado.
        }
    }
   
  }

 function cancelAgreement(uint _idAgreement) public {
     require(msg.sender == idcontractAgreement[_idAgreement].seller || idcontractAgreement[_idAgreement].buyer || owner);

     contractAgreements[_idAgreement].isActive = false;



 }


  //Revisar.

  function updateLatestPaidTime(uint _idAgreement) private {
      
      contractAgreements[_idAgreement].latestPaidTime = now;

  }

  function dailyPayment(uint _idAgreement, uint _onlineTime) public { 
     require(contractAgreements[_idAgreement].isActive == true);

     if(now >= contractAgreements[_idAgreement].latestPaidTime + contractAgreements[_idAgreement].paymentInterval && this.balance >= contractAgreements[_idAgreement].dailyPayment){

         if(_onlineTime == 24) {
             contractAgreements[_idAgreement].seller.transfer(contractAgreements[_idAgreement].dailyPayment);
             updateLatestPaidTime(_idAgreement);
         } 
         else {
             uint sellerPayment = mul(_onlineTime, div(contractAgreements[_idAgreement].dailyPayment,24));
             uint buyerPayment = sub(contractAgreements[_idAgreement].dailyPayment, sellerPayment);

             contractAgreements[_idAgreement].seller.transfer(sellerPayment);
             contractAgreements[_idAgreement].buyer.transfer(buyerPayment);

             updateLatestPaidTime(_idAgreement)
             
         }
     }

  }




}
